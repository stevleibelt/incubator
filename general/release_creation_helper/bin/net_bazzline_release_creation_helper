#!/bin/env php
<?php
/**
 * @author stev leibelt <artodeto@bazzline.net>
 * @since 2015-10-09
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use Net\Bazzline\Component\Command\Command;
use Net\Bazzline\Component\Cli\Arguments\Arguments;

function echoIfWanted($isWanted, $string)
{
    if ($isWanted) {
        echo $string . PHP_EOL;
    }
}

try {
    //begin of dependencies
    $usage      = basename(__FILE__) . ' <branch to create release from> <release branch name> <branch to merge into> [<branch to merge into> [...]] [-v|--verbose]';
    $arguments  = new Arguments($argv);
    $command    = new Command();
    //end of dependencies

    //begin of arguments parsing and validation
    $beVerbose          = ($arguments->hasFlag('verbose') || $arguments->hasFlag('v'));
    $values             = $arguments->getValues();
    $valuesAreInvalid   = (count($values) < 3);

    if ($valuesAreInvalid) {
        throw new RuntimeException(
            'invalid number of arguments provided'
        );
    }

    $branchToCreateReleaseFrom  = array_shift($values);
    $releaseBranchName          = array_shift($values);
    $branchesToMerge            = $values;
    //end of arguments parsing and validation

    echoIfWanted($beVerbose, 'switching to branch "' . $branchToCreateReleaseFrom);
    $command('/bin/env git checkout ' . $branchToCreateReleaseFrom);
    echoIfWanted($beVerbose, 'updating branch');
    $command('/bin/env git pull origin ' . $branchToCreateReleaseFrom);
    echoIfWanted($beVerbose, 'creating branch "' . $releaseBranchName . '"');
    $command('/bin/env git checkout -b ' . $releaseBranchName);

    foreach ($branchesToMerge as $branchToMerge) {
        echoIfWanted($beVerbose, 'trying to merge "' . $branchToMerge . '"');
        $command('/bin/env git merge --no-ff ' . $branchToMerge);
    }

    echo 'done, all you have to do is to push the branch "' . $releaseBranchName . '"' . PHP_EOL;
} catch (Exception $exception) {
    echo 'An error occurred' . PHP_EOL;
    echo $exception->getMessage() . PHP_EOL;
    echo PHP_EOL;
    echo $usage;
    echo PHP_EOL;
    exit(1);
}