#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2015-10-11
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;
use Net\Bazzline\Component\Command\Command;

$environment    = new CommandLineEnvironment($argv);
$usage          = basename(__FILE__) . ' <path to repository> <branch to merge into> [<branch to merge into> [...]] [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //begin of dependencies
        $arguments  = $environment->getArguments();
        $command    = new Command();
        //end of dependencies

        //begin of arguments parsing and validation
        $values             = $arguments->getValues();
        $valuesAreInvalid   = (count($values) < 2);

        if ($valuesAreInvalid) {
            throw new InvalidArgumentException(
                'invalid number of arguments provided'
            );
        }

        $pathToRepository           = array_shift($values);
        $branchesToMerge            = $values;
        $currentWorkingDirectory    = getcwd();

        if (!is_dir($pathToRepository)) {
            throw new InvalidArgumentException(
                'invalid repository path provided: ' . $pathToRepository
            );
        }
        //end of arguments parsing and validation

        //begin of changing to repository path
        $environment->outputIfVerbosityIsEnabled('changing to "' . $pathToRepository . '"');
        chdir($pathToRepository);
        //end of changing to repository path

        //begin of fetching current release branch name
        $lines                      = $command('/bin/env git status');
        $releaseBranchName          = substr($lines[0], 10);  // 10 = >>On branch <<
        //end of fetching current release branch name
        
        //begin of merging branches into release
        foreach ($branchesToMerge as $branchToMerge) {
            //@see https://www.git-scm.com/docs/git-merge
            $environment->outputIfVerbosityIsEnabled('trying to merge "' . $branchToMerge . '"');
            $command('/bin/env git merge --no-ff --no-edit --commit --quiet ' . $branchToMerge);
            $environment->outputIfVerbosityIsEnabled('pushing branch "' . $releaseBranchName . '"');
            $command('/bin/env git push origin ' . $releaseBranchName);
        }
        //end of merging branches into release

        //begin of status output
        $messages = array(
            'continued release creation "' . $releaseBranchName . '" with following branches merged:',
        );
        foreach ($branchesToMerge as $branch) {
            $messages[] = '    ' . $branch;
        }
        $environment->output($messages);
        //end of status output

        //begin of changing back to current working directory
        $environment->outputIfVerbosityIsEnabled('changing to "' . $currentWorkingDirectory . '"');
        chdir($currentWorkingDirectory);
        //end of changing back to current working directory
    },
    $usage
);