#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2015-10-10
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;
use Net\Bazzline\Component\Command\Command;

$environment    = new CommandLineEnvironment($argv);
$usage			= basename(__FILE__) . ' <identifier> [<unique identifier> [...]] [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //begin of dependencies
        $arguments  = $environment->getArguments();
        $command    = new Command();
        $text       = $environment->getText();
        //end of dependencies

        //begin of arguments parsing and validation
        $identifiers            = $arguments->getValues();
        $identifiersAreInvalid  = (count($identifiers) < 1);

        if ($identifiersAreInvalid) {
            throw new InvalidArgumentException(
                'invalid number of arguments provided'
            );
        }
        //end of arguments parsing and validation

        //begin of branch fetching
        $environment->outputIfVerbosityIsEnabled('fetching available remote lines');
        $command('/bin/env git fetch origin');
        $environment->outputIfVerbosityIsEnabled('reading available remote lines');
        $lines      = $command('/bin/env git branch -r');
        $branches   = array();
        //end of branch fetching

        //begin of branch streamlining
        foreach ($lines as $line) {
            $positionOfOrigin       = strpos($line, 'origin/');
            $hasOriginInString      = ($positionOfOrigin !== false);

            if ($hasOriginInString) {
                $positionOfWhitespace   = strpos($line, ' ', $positionOfOrigin);
                $hasWhitespaceInString  = ($positionOfWhitespace !== false);

                if ($hasWhitespaceInString) {
                    $length = ($positionOfWhitespace - $positionOfOrigin);
                    $branch = substr($line, $positionOfOrigin, $length);
                } else {
                    $branch = substr($line, $positionOfOrigin);
                }
                $branches[] = strtolower(trim($branch));
            }
        }
        //end of branch streamlining

        //begin of identifier matching
        $branchesFoundPerIdentifier = array();   //@todo find better name

        foreach ($identifiers as $identifier) {
            $identifier = strtolower(trim($identifier));
            foreach ($branches as $branch) {
                if ($text->contains($branch, $identifier)) {
                    if (!isset($branchesFoundPerIdentifier[$identifier])) {
                        $branchesFoundPerIdentifier[$identifier] = array($branch);
                    } else {
                        $branchesFoundPerIdentifier[$identifier][] = $branch;
                    }
                }
            }
        }
        //end of identifier matching

        //begin of result output
        $nothingWasFound = (count($branchesFoundPerIdentifier) < 1);

        if ($nothingWasFound) {
            echo 'no matches found for provided identifiers in the available remote branches' . PHP_EOL;
            $environment->outputIfVerbosityIsEnabled(PHP_EOL . 'available remote branches:' . PHP_EOL . implode(PHP_EOL, $lines));
        } else {
            $environment->outputIfVerbosityIsEnabled('');
            foreach ($branchesFoundPerIdentifier as $uniqueIdentifier => $branches) {
                if ($environment->beVerbose()) {
                    $environment->output($uniqueIdentifier . ': ' . implode(' ', $branches));
                } else {
                    $environment->output(implode(' ', $branches) . ' ');
                }
            }
        }
        //end of result output
    },
    $usage
);